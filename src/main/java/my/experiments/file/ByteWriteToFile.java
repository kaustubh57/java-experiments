package my.experiments.file;

import java.io.*;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Base64;

public class ByteWriteToFile {

    public static void main(String[] args) {

        OutputStream opStream = null;
        try {
            String strContent = "";
            byte[] byteContent = Base64.getDecoder().decode(strContent);
            // byte[] byteContent = Base64.getEncoder().encode(strContent.getBytes());
            // Note preferred way of declaring an array variable
//            byte[] data = Base64.decodeBase64(crntImage);
//            try (OutputStream stream = new FileOutputStream("c:/decode/abc.bmp")) {
//                stream.write(data);
//            }

            File myFile = new File("ios-certificate.p12");
            // check if file exist, otherwise create the file before writing
            if (!myFile.exists()) {
                myFile.createNewFile();
            }
            opStream = new FileOutputStream(myFile);
            opStream.write(byteContent);
            opStream.flush();

//            byte encodedCert[] = Base64.getDecoder().decode(strContent);
//            ByteArrayInputStream inputStream  =  new ByteArrayInputStream(encodedCert);
//
//            CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
//            X509Certificate cert = (X509Certificate)certFactory.generateCertificate(inputStream);
        } catch (Exception e) {
            e.printStackTrace();
        } finally{
            try{
                if(opStream != null) opStream.close();
            } catch(Exception ex){
                ex.printStackTrace();
            }
        }
    }
}